variables:
  REPO_URL: "https://gitlab.com/saljooq/steamednotes.git"

stages:
 - terraform
 - build
 - deploy

terraform_setup:
  stage: terraform
  image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  script:
    - cd terraform
    - terraform init
    - terraform plan
    - terraform apply -auto-approve
    - |
      NEW_IP=$(terraform output -raw ec2_public_ip)
      if [ "$NEW_IP" != "$EC2_HOST" ]; then
        echo "IP has changed! Updating GitLab CI/CD variable from $EC2_HOST to $NEW_IP..."
        curl --request PUT \
          --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
          --data "value=$NEW_IP" \
          "https://gitlab.com/api/v4/projects/$PROJECT_ID/variables/EC2_HOST"
        if [ $? -eq 0 ]; then
          echo "Successfully updated EC2_HOST to $NEW_IP."
        else
          echo "Failed to update variable EC2_HOST!"
          exit 1
        fi
      else
        echo "No change in public IP detected. It's still $EC2_HOST"
      fi
  when: manual


# Reusable SSH base job
.ssh_base:
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/steamednotes_key.pem
    - chmod 600 ~/.ssh/steamednotes_key.pem
    - ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
    # - ssh -i ~/.ssh/steamednotes_key.pem -v ubuntu@$EC2_HOST || true  # Verbose debug


# This would do several things:
# 1. KILL processes in all ports that might be used (80 and 8080)
# 2. check if repo is already there, do docker compose down otherwise get 
# the latest changes
# 3. 
deploy_to_ec2:
  extends: .ssh_base
  stage: deploy
  script:
    - |
      if [ -f backend/main ]; then
        echo "Copying over the backend artifacts"
        scp -i ~/.ssh/steamednotes_key.pem backend/main ubuntu@$EC2_HOST:/tmp/main
      else
        echo "No artifacts backend to copy - will use if any already existed in remote"
      fi
      if [ -d dist ]; then
        echo "Copying over the frontend artifacts"
        scp -r -i ~/.ssh/steamednotes_key.pem dist ubuntu@$EC2_HOST:/tmp/
      else
        echo "No frontend artifacts to copy - will use existing on remote if present"
      fi
      ssh -i ~/.ssh/steamednotes_key.pem ubuntu@$EC2_HOST << ENDSSH
        set -x
        echo "Next we will update and install docker and git"
        sudo apt update -y
        sudo apt install -y docker.io git docker-compose psmisc
        echo "We will stop processes in port 80 and 8080"
        sudo fuser -k 80/tcp || true 
        sudo fuser -k 8080/tcp || true 
        echo "Starting docker"
        sudo systemctl start docker
        sudo usermod -a -G docker ubuntu
        echo "Next we check if existing repo existed we do docker-compose down"
        cd ~ && [ -d app ] && cd app && docker-compose down || true
        echo "Cleaning up previous work and doing a fresh clone"
        cd ~
        rm -rf app
        git clone --depth=1 $REPO_URL app
        cd app
        [ -f /tmp/main ] && cp /tmp/main backend/main || echo "No backend/main to copy"
        [ -d /tmp/dist ] && cp -r /tmp/dist/. dist || echo "No dist to copy"
        chmod +x backend/main
        docker-compose up -d
      ENDSSH
  when: manual

build_go_binary:
  stage: build
  image: golang:1.23
  script:
    - cd backend
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -ldflags '-w -s -extldflags "-static"' -o main .
  artifacts:
    paths:
      - backend/main  # Store the binary
    expire_in: 1 hour
  when: manual


build_frontend:
  stage: build
  image: node:22
  script:
    - cd frontend/steamed-notes-frontend
    - npm install
    - npm run build
    - mv dist ../../  # Move to root for Dockerfile
  artifacts:
    paths:
      - dist/
    expire_in: 1 hour
  when: manual