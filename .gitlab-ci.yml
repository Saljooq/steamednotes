variables:
  REPO_URL: "https://oauth2:$GITLAB_PAT@gitlab.com/saljooq/steamednotes.git"

stages:
 - terraform
 - deploy

terraform_setup:
  stage: terraform
  image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
  script:
    - cd terraform
    - terraform init
    - terraform plan
    - terraform apply -auto-approve
    - terraform output -raw ec2_public_ip
  when: manual


# Reusable SSH base job
.ssh_base:
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/steamednotes_key.pem
    - chmod 600 ~/.ssh/steamednotes_key.pem
    - ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
    # - ssh -i ~/.ssh/steamednotes_key.pem -v ubuntu@$EC2_HOST || true  # Verbose debug


# This would do several things:
# 1. KILL processes in all ports that might be used (80 and 8080)
# 2. check if repo is already there, do docker compose down otherwise get 
# the latest changes
# 3. 
deploy_to_ec2:
  extends: .ssh_base
  stage: deploy
  script:
    - |
      ssh -i ~/.ssh/steamednotes_key.pem ubuntu@$EC2_HOST << ENDSSH
        set -x
        echo "Next we will update and install docker and git"
        sudo apt update -y
        sudo apt install -y docker.io git docker-compose psmisc
        echo "We will stop processes in port 80 and 8080"
        sudo fuser -k 80/tcp || true 
        sudo fuser -k 8080/tcp || true 
        echo "Starting docker"
        sudo systemctl start docker
        sudo usermod -a -G docker ubuntu
        sudo apt install -y docker-compose
        echo "Next we check if existing repo existed we do docker-compose down"
        cd ~ && [ -d app ] && cd app && docker-compose down || true
        echo "Cleaning up previous work and doing a fresh clone"
        rm -rf app
        git clone --depth=1 $REPO_URL app
        cd app
        docker-compose up -d --build
      ENDSSH
  when: manual