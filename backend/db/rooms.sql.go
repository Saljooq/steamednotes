// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rooms.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRoom = `-- name: CreateRoom :exec
INSERT INTO rooms (name, user_id)
VALUES ($1, $2)
`

type CreateRoomParams struct {
	Name   string
	UserID int32
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) error {
	_, err := q.db.Exec(ctx, createRoom, arg.Name, arg.UserID)
	return err
}

const findRoomsByUser = `-- name: FindRoomsByUser :many
SELECT id, name, created_at FROM rooms 
where user_id=$1
`

type FindRoomsByUserRow struct {
	ID        int32
	Name      string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) FindRoomsByUser(ctx context.Context, userID int32) ([]FindRoomsByUserRow, error) {
	rows, err := q.db.Query(ctx, findRoomsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindRoomsByUserRow
	for rows.Next() {
		var i FindRoomsByUserRow
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
