// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notes.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNote = `-- name: CreateNote :one
INSERT INTO notes (room_id, room_name, folder_id, folder_name, user_id, title, content)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at
`

type CreateNoteParams struct {
	RoomID     int32
	RoomName   string
	FolderID   int32
	FolderName string
	UserID     int32
	Title      string
	Content    string
}

type CreateNoteRow struct {
	ID        int32
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (CreateNoteRow, error) {
	row := q.db.QueryRow(ctx, createNote,
		arg.RoomID,
		arg.RoomName,
		arg.FolderID,
		arg.FolderName,
		arg.UserID,
		arg.Title,
		arg.Content,
	)
	var i CreateNoteRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const findNotesByFolder = `-- name: FindNotesByFolder :many
SELECT id, title, created_at FROM notes
where folder_id=$1 AND user_id=$2
`

type FindNotesByFolderParams struct {
	FolderID int32
	UserID   int32
}

type FindNotesByFolderRow struct {
	ID        int32
	Title     string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) FindNotesByFolder(ctx context.Context, arg FindNotesByFolderParams) ([]FindNotesByFolderRow, error) {
	rows, err := q.db.Query(ctx, findNotesByFolder, arg.FolderID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindNotesByFolderRow
	for rows.Next() {
		var i FindNotesByFolderRow
		if err := rows.Scan(&i.ID, &i.Title, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findNotesById = `-- name: FindNotesById :one
SELECT id, room_id, folder_id, user_id, title, content, created_at, room_name, folder_name FROM notes where id=$1
`

func (q *Queries) FindNotesById(ctx context.Context, id int32) (Note, error) {
	row := q.db.QueryRow(ctx, findNotesById, id)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.FolderID,
		&i.UserID,
		&i.Title,
		&i.Content,
		&i.CreatedAt,
		&i.RoomName,
		&i.FolderName,
	)
	return i, err
}

const updateNoteNameAndContent = `-- name: UpdateNoteNameAndContent :exec
UPDATE notes
SET title = $1, content = $2
WHERE id = $3 AND user_id = $4
`

type UpdateNoteNameAndContentParams struct {
	Title   string
	Content string
	ID      int32
	UserID  int32
}

func (q *Queries) UpdateNoteNameAndContent(ctx context.Context, arg UpdateNoteNameAndContentParams) error {
	_, err := q.db.Exec(ctx, updateNoteNameAndContent,
		arg.Title,
		arg.Content,
		arg.ID,
		arg.UserID,
	)
	return err
}
