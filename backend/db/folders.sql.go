// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: folders.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFolder = `-- name: CreateFolder :one
INSERT INTO folders (room_id, user_id, name, room_name)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at
`

type CreateFolderParams struct {
	RoomID   int32
	UserID   int32
	Name     string
	RoomName string
}

type CreateFolderRow struct {
	ID        int32
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateFolder(ctx context.Context, arg CreateFolderParams) (CreateFolderRow, error) {
	row := q.db.QueryRow(ctx, createFolder,
		arg.RoomID,
		arg.UserID,
		arg.Name,
		arg.RoomName,
	)
	var i CreateFolderRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}

const findFolderById = `-- name: FindFolderById :one
SELECT id, room_id, user_id, name, created_at, room_name FROM folders where id=$1
`

func (q *Queries) FindFolderById(ctx context.Context, id int32) (Folder, error) {
	row := q.db.QueryRow(ctx, findFolderById, id)
	var i Folder
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.RoomName,
	)
	return i, err
}

const findFoldersByRoom = `-- name: FindFoldersByRoom :many
SELECT id, name, created_at FROM folders 
where room_id=$1 AND user_id=$2
`

type FindFoldersByRoomParams struct {
	RoomID int32
	UserID int32
}

type FindFoldersByRoomRow struct {
	ID        int32
	Name      string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) FindFoldersByRoom(ctx context.Context, arg FindFoldersByRoomParams) ([]FindFoldersByRoomRow, error) {
	rows, err := q.db.Query(ctx, findFoldersByRoom, arg.RoomID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindFoldersByRoomRow
	for rows.Next() {
		var i FindFoldersByRoomRow
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
